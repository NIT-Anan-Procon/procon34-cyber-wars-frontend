import { CHALLENGE_CHOICES_KEY, useFetchChallengeQuery } from '@/features/challenge';
import styled, { css } from 'styled-components';
import { checkedVulnerabilies } from '../states/atom';
import { useRecoilState } from 'recoil';
import { CheckBox } from '@/components/Elements';
import { Loading } from '@/components/Animation';

  import { isCheckedChoicesState } from '@/features/choices/states/atom';
  import { useEffect } from 'react';
  import { Spinner } from '@/components/Elements';
import { useTransChoicesData } from '../../choices/hook/useTransChoicesData';
import { selectDummyData } from '@/features/choices/functions/selectDummyData';
import { shuffleArray } from '@/features/choices/functions/shuffleArray';
  
const _VulnerabilityList= styled.ul`
  height: 100%;
  width : 100%;
  display: grid;
  grid-template-columns: repeat(
    auto-fill,
    minmax(12rem, 1fr)
  );
  grid-template-rows: repeat(
    auto-fill,
    minmax(8rem, 1fr)
  );
`;

export const VulnerabilityCheckList= () => {
  const [ checkedVulItems, setCheckedVulItems] = useRecoilState( checkedVulnerabilies );

    const [ isChoiceChecked, setIsChoiceChecked ]= useRecoilState( isCheckedChoicesState );
  
    const { data: choices, isLoading }= useFetchChallengeQuery({
      config: {
        select: ( challenge ) => 
        {
          const defaultChoices= challenge?.[ CHALLENGE_CHOICES_KEY ];
  
          const randomSelectDummyList= selectDummyData( 10 );
          const addedDummyData= [...defaultChoices, ...randomSelectDummyList ];
          const shuffledChoiceList= shuffleArray( addedDummyData );

          return shuffledChoiceList
        }
      }
    })

  if( isLoading ) {
    return <Loading />
  }

  const handleChange = (e) => {
    const { id, value, checked }= e.target;
    if ( checked ) {
      setCheckedVulItems([ ...checkedVulItems, e.target.value ]);
    } else {
      setCheckedVulItems(checkedVulItems.filter((item) => item !== value ));
    }
  };

  return (
    <_VulnerabilityList>
      { 
        choices?.map(( value: string, index: number ) => (
          <CheckBox 
            key     = { `vulItem_${index}` }
            index   = { index }
            value   = { value }
            label   = { value }
            checked = { checkedVulItems.includes( index ) }
            onChange= { handleChange }
          />
        ))
      }
    </_VulnerabilityList>
  );
};
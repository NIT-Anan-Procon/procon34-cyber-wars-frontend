import { useRecoilValue } from 'recoil';
import styled from 'styled-components';
import { vulnerabiliesFormatSelector } from '../states/selector/vulnerabilitiesFormatSelector';
import { useFetchChallengeQuery } from '@/features/challenge';
import { useCreateVulnerabilityValues } from './hook/createVulnerabilityValues';
import { checkedVulnerabilies } from '../states/atom';

// import { vulnerabiliesFormatSelector } from '../selector/vulnerabilitiesFormatSelector';

const _VulnerabilitySelectedFeild= styled.div`
  height: 100%;
  width : 75%;
  padding-left: 12px;
  display: flex;
  align-items: center;
  background: #bebebe;
  border-radius: 10px;
`;

const _VulnerabilitiesText= styled.p`
  font-size: 1.6rem;
`;

export const VulnerabilitySelectedFeild= () => {
  const { vulnerabilityArray }= useCreateVulnerabilityValues();
  const checkedIndex= useRecoilValue( checkedVulnerabilies );
  const { data: choices, isLoading }= useFetchChallengeQuery({
    config: {
      select: ( data ) => {
        return vulnerabilityArray( data );
      }
    }
  });

  if(isLoading) {
    return <>loading</>
  };

  if( !choices ) return null;


  // const selectedVulItems= useRecoilValue( vulnerabiliesFormatSelector );

  return (
    <_VulnerabilitySelectedFeild >
      <_VulnerabilitiesText>
        { choices
          ?.filter(( item, index ) =>  checkedIndex[index] )
          ?.map(( item) => (
            item
          ))
        }
        </_VulnerabilitiesText>
    </_VulnerabilitySelectedFeild>
  );
};
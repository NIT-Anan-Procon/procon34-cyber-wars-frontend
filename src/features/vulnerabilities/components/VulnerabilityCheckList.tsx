import { colors } from '@/assets/styles';
import { CHOICES_KEY, VULNERABILITIES_KEY, useChallengeTranslator, useFetchChallengeQuery } from '@/features/challenge';
import styled, { css } from 'styled-components';
import { checkedVulnerabilies } from '../states/atom';
import { useRecoilState } from 'recoil';
import { CheckBox } from '@/components/Elements';
import React from 'react';

// import { useChallengeDataTranslator } from '../hooks/challengeDataTranslator';
// import { CheckBox } from '@/components/Elements';
// import { useRecoilState } from 'recoil';
// import { vulnerabilityListState } from '@/atoms';
// import { useTransCheckList } from './VulnerabilityCheckList/hook/useTransCheckList';

const _VulnerabilityList= styled.ul`
  height: 100%;
  width : 100%;
  display: grid;
  grid-template-columns: repeat(
    auto-fill,
    minmax(12rem, 1fr)
  );
  grid-template-rows: repeat(
    auto-fill,
    minmax(8rem, 1fr)
  );
`;

export const VulnerabilityCheckList= () => {
  const [checkedItems, setCheckedItems] = useRecoilState( checkedVulnerabilies );
  const [ checkedVulItems, setCheckedVulItems ] = useRecoilState( checkedVulnerabilies );
  const { data: choices, isLoading }= useFetchChallengeQuery({
    config: {
      select: ( data ) => {
        return data?.[ VULNERABILITIES_KEY ].flatMap(
          (item: { choices: string[]; hint: string; hintScore: number; }) => 
          item[ CHOICES_KEY ]
        );
      }
    }
  });

  if( isLoading ) {
    return <>loading</>
  }

  // const handleChange = (e) => {
  //   const { id, value, checked }= e.target;
  //   if ( checked ) {
  //     setCheckedVulItems([ ...checkedVulItems, e.target.value ]);
  //   } else {
  //     setCheckedVulItems(checkedVulItems.filter((item) => item !== value ));
  //   }
  // };



  const handleChange = (index, value) => {
    // copy the checkedItems object
    const newCheckedItems = { ...checkedItems };
    // update the checked state of the checkbox at the given index
    newCheckedItems[index] = value;

    setCheckedItems(newCheckedItems);
  };
  return (
    <_VulnerabilityList>
      { 
        choices?.map(( value, index ) => (
          <CheckBox
            key     = { `vulItem_${index}` }
            index   = { index }
            value   = { value }
            label   = { value }
            checked = { checkedItems[index] || false }
            onChange= { (e) => handleChange(index, e.target.checked) }
          />
        ))
      }
    </_VulnerabilityList>
  );
};
import { colors } from '@/assets/styles';
import styled, { css } from 'styled-components';
import { useChallengeDataTranslator } from '../hooks/challengeDataTranslator';
import { CheckBox } from '@/components/Elements';
import { useRecoilState } from 'recoil';
import { vulnerabilityListState } from '@/atoms';

const _VulnerabilityList= styled.ul`
  height: 100%;
  width : 100%;
  display: grid;
  grid-template-columns: repeat(
    auto-fill,
    minmax(12rem, 1fr)
  );
  grid-template-rows: repeat(
    auto-fill,
    minmax(8rem, 1fr)
  );
`;

export const VulnerabilityCheckList= () => {
  const { vulnerabilities, isLoading }= useChallengeDataTranslator();

  if(isLoading) {
    return <>Loadings</>
  } 

  const [ checkedVulItems, setCheckedVulItems ] = useRecoilState( vulnerabilityListState );

  const handleChange = (e) => {
    if (checkedVulItems.includes(e.target.value)) {
      setCheckedVulItems(
        checkedVulItems.filter((checkedVulItems) => checkedVulItems !== e.target.value)
      );
    } else {
      setCheckedVulItems([...checkedVulItems, e.target.value]);
    }
  };

  return (
    <_VulnerabilityList>
      { 
        vulnerabilities?.map(( value, index ) => (
          <CheckBox 
            key     = { `vulItem_${index}` }
            id      = { `vul-list-item-${index}` }
            value   = { value }
            checked = { checkedVulItems.includes(value) }
            onChange= { handleChange }
          />
        ))
      }
    </_VulnerabilityList>
  );
};